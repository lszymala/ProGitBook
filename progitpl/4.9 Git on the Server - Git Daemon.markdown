## Git Daemon ##

For public, unauthenticated read access to your projects, you’ll want to move
past the HTTP protocol and start using the Git protocol. The main reason is
speed. The Git protocol is far more efficient and thus faster than the HTTP
protocol, so using it will save your users time.

Again, this is for unauthenticated read-only access. If you’re running this on a
server outside your firewall, it should only be used for projects that are
publicly visible to the world. If the server you’re running it on is inside your
firewall, you might use it for projects that a large number of people or
computers (continuous integration or build servers) have read-only access to,
when you don’t want to have to add an SSH key for each.

In any case, the Git protocol is relatively easy to set up. Basically, you need
to run this command in a daemonized manner:

git daemon --reuseaddr --base-path=/opt/git/ /opt/git/

\`--reuseaddr\` allows the server to restart without waiting for old connections
to time out, the \`--base-path\` option allows people to clone projects without
specifying the entire path, and the path at the end tells the Git daemon where
to look for repositories to export. If you’re running a firewall, you’ll also
need to punch a hole in it at port 9418 on the box you’re setting this up on.

You can daemonize this process a number of ways, depending on the operating
system you’re running. On an Ubuntu machine, you use an Upstart script. So, in
the following file

/etc/event.d/local-git-daemon

you put this script:

start on startup

stop on shutdown

exec /usr/bin/git daemon \

--user=git --group=git \

--reuseaddr \

--base-path=/opt/git/ \

/opt/git/

respawn

For security reasons, it is strongly encouraged to have this daemon run as a
user with read-only permissions to the repositories — you can easily do this by
creating a new user 'git-ro' and running the daemon as them. For the sake of
simplicity we’ll simply run it as the same 'git' user that Gitosis is running
as.

When you restart your machine, your Git daemon will start automatically and
respawn if it goes down. To get it running without having to reboot, you can run
this:

initctl start local-git-daemon

On other systems, you may want to use \`xinetd\`, a script in your \`sysvinit\`
system, or something else — as long as you get that command daemonized and
watched somehow.

Next, you have to tell your Gitosis server which repositories to allow
unauthenticated Git server-based access to. If you add a section for each
repository, you can specify the ones from which you want your Git daemon to
allow reading. If you want to allow Git protocol access for your iphone project,
you add this to the end of the \`gitosis.conf\` file:

[repo iphone_project]

daemon = yes

When that is committed and pushed up, your running daemon should start serving
requests for the project to anyone who has access to port 9418 on your server.

If you decide not to use Gitosis, but you want to set up a Git daemon, you’ll
have to run this on each project you want the Git daemon to serve:

\$ cd /path/to/project.git

\$ touch git-daemon-export-ok

The presence of that file tells Git that it’s OK to serve this project without
authentication.

Gitosis can also control which projects GitWeb shows. First, you need to add
something like the following to the \`/etc/gitweb.conf\` file:

\$projects_list = "/home/git/gitosis/projects.list";

\$projectroot = "/home/git/repositories";

\$export_ok = "git-daemon-export-ok";

@git_base_url_list = ('git://gitserver');

You can control which projects GitWeb lets users browse by adding or removing a
\`gitweb\` setting in the Gitosis configuration file. For instance, if you want
the iphone project to show up on GitWeb, you make the \`repo\` setting look like
this:

[repo iphone_project]

daemon = yes

gitweb = yes

Now, if you commit and push the project, GitWeb will automatically start showing
your iphone project.
